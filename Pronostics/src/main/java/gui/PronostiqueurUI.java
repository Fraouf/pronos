/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import pronostics.Equipe;
import pronostics.Match;
import pronostics.NeuralNetwork;
import pronostics.Pari;
import sql.SQLConnection;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instances;

/**
 *
 * @author k1fryouf
 */
public class PronostiqueurUI extends javax.swing.JFrame {

    private SQLConnection myConnection;
    private NeuralNetwork nn;
    private ArrayList<Match> listeMatchs = new ArrayList<>();
    private NumberFormat formatter = new DecimalFormat("#0.00");
    
    /**
     * Creates new form PronostiqueurUI
     * @param myConnection
     */
    public PronostiqueurUI(SQLConnection myConnection, NeuralNetwork nn) {
        this.nn = nn;
        this.myConnection = myConnection;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxEquipeDom = new javax.swing.JComboBox();
        jComboBoxEquipeExt = new javax.swing.JComboBox();
        jLabelStatDom = new javax.swing.JLabel();
        jLabelStatExt = new javax.swing.JLabel();
        jLabelStatNull = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextQuoteDom = new javax.swing.JTextField();
        jTextQuoteEgalite = new javax.swing.JTextField();
        jTextQuoteExt = new javax.swing.JTextField();
        jButtonSaveQuote = new javax.swing.JButton();
        jButtonParier = new javax.swing.JButton();
        jComboBoxCompDom = new javax.swing.JComboBox();
        jComboBoxCompExt = new javax.swing.JComboBox();
        jTextMontant = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabelPronostique = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        myConnection.setTableName("APP.EQUIPES");
        ArrayList<Equipe> equipes = myConnection.selectTeams("");
        ArrayList<String> s = new ArrayList<>();
        for(Equipe e : equipes){
            s.add(e.getNom());
        }
        jComboBoxEquipeDom.setModel(new javax.swing.DefaultComboBoxModel(s.toArray(new String[s.size()])));
        jComboBoxEquipeDom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEquipeDomActionPerformed(evt);
            }
        });

        jComboBoxEquipeExt.setModel(new javax.swing.DefaultComboBoxModel(s.toArray(new String[s.size()])));
        jComboBoxEquipeExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEquipeExtActionPerformed(evt);
            }
        });

        jLabelStatDom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStatDom.setToolTipText("");

        jLabelStatExt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelStatNull.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setText("VS");

        jButton1.setText("Fermer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextQuoteExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextQuoteExtActionPerformed(evt);
            }
        });

        jButtonSaveQuote.setText("Sauvegarder");
        jButtonSaveQuote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveQuoteActionPerformed(evt);
            }
        });

        jButtonParier.setText("Parier");
        jButtonParier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParierActionPerformed(evt);
            }
        });

        myConnection.setTableName("APP.EQUIPES");
        ArrayList<String> comps = myConnection.selectCompetitions("Toutes");
        comps.set(0,"Toutes");
        jComboBoxCompDom.setModel(new javax.swing.DefaultComboBoxModel(comps.toArray(new String[comps.size()])));
        jComboBoxCompDom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCompDomActionPerformed(evt);
            }
        });

        jComboBoxCompExt.setModel(new javax.swing.DefaultComboBoxModel(comps.toArray(new String[comps.size()])));
        jComboBoxCompExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCompExtActionPerformed(evt);
            }
        });

        jLabel2.setText("Pronostique :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBoxEquipeDom, 0, 152, Short.MAX_VALUE)
                                    .addComponent(jComboBoxCompDom, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextQuoteDom, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(79, 79, 79)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jTextQuoteEgalite, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabelStatNull, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxCompExt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBoxEquipeExt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jTextQuoteExt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelPronostique)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelStatExt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonParier, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStatDom, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextMontant, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSaveQuote)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCompDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCompExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEquipeDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEquipeExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatDom, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStatExt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStatNull, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelPronostique))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextQuoteDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextQuoteExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextQuoteEgalite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButtonSaveQuote)
                    .addComponent(jButtonParier)
                    .addComponent(jTextMontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxEquipeDomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEquipeDomActionPerformed
        try {
            //calculate(jComboBoxEquipeDom.getSelectedItem().toString(),jComboBoxEquipeExt.getSelectedItem().toString());
            pronostiquer();
            double [] stats = nn.getwTeams().pronostiquer(jComboBoxEquipeDom.getSelectedItem().toString(), jComboBoxEquipeExt.getSelectedItem().toString());
            jLabelStatDom.setText(formatter.format(stats[0]*100)+"%");
            jLabelStatNull.setText(formatter.format(stats[1]*100)+"%");
            jLabelStatExt.setText(formatter.format(stats[2]*100)+"%");
        } catch (Exception ex) {
            Logger.getLogger(PronostiqueurUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxEquipeDomActionPerformed

    private void jComboBoxEquipeExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEquipeExtActionPerformed
        //calculate(jComboBoxEquipeDom.getSelectedItem().toString(),jComboBoxEquipeExt.getSelectedItem().toString());
        try {
            pronostiquer();
            double [] stats = nn.getwTeams().pronostiquer(jComboBoxEquipeDom.getSelectedItem().toString(), jComboBoxEquipeExt.getSelectedItem().toString());
            jLabelStatDom.setText(formatter.format(stats[0]*100)+"%");
            jLabelStatNull.setText(formatter.format(stats[1]*100)+"%");
            jLabelStatExt.setText(formatter.format(stats[2]*100)+"%");
        } catch (Exception ex) {
            Logger.getLogger(PronostiqueurUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxEquipeExtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextQuoteExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextQuoteExtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextQuoteExtActionPerformed

    private void jButtonSaveQuoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveQuoteActionPerformed
        
        Match m = new Match(jComboBoxEquipeDom.getSelectedItem().toString(), jComboBoxEquipeExt.getSelectedItem().toString(),"",null,"",-1,-1);
        m.setQuoteDom(Double.parseDouble(jTextQuoteDom.getText()));
        m.setQuoteEgalite(Double.parseDouble(jTextQuoteEgalite.getText()));
        m.setQuoteExt(Double.parseDouble(jTextQuoteExt.getText()));
        
        listeMatchs.add(m);
        
        jComboBoxEquipeDom.setSelectedIndex(0);
        jComboBoxEquipeExt.setSelectedIndex(0);
        jTextQuoteDom.setText("");
        jTextQuoteEgalite.setText("");
        jTextQuoteExt.setText("");
    }//GEN-LAST:event_jButtonSaveQuoteActionPerformed

    private void jButtonParierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParierActionPerformed

        
        ArrayList<Pari> combines = new ArrayList<>();
        
        int k;
        double tp=0;
        
        for(Match m : listeMatchs){
            ArrayList<Double> stats = calculate(m.getEquipeDom(),m.getEquipeExt());
            double dt = m.getQuoteDom()+m.getQuoteEgalite()+m.getQuoteExt();
            double d1 = m.getQuoteExt()/dt;
            double d2 = m.getQuoteEgalite()/dt;
            double d3 = m.getQuoteDom()/dt;
            
            //d1 = (stats.get(0)+d1)/2;
            //d2 = (stats.get(0)+d2)/2;
            //d3 = (stats.get(0)+d3)/2;
            //70
            
            if(d1 > d2 && d1 > d3){
                combines.add(new Pari(m,m.getEquipeDom(),d1));
                tp+=d1;
            }else if(d2 > d1 && d2 > d3){
                combines.add(new Pari(m,"Égalité",d2));
                tp+=d2;
            }else{
                combines.add(new Pari(m,m.getEquipeExt(),d3));
                tp+=d3;
            }
        }
        
        for(Pari p : combines){
            p.setMontant((p.getPourcentage()/tp)* Double.parseDouble(jTextMontant.getText()));
        }

        combines.stream().forEach((p) -> {
            System.out.println(p.toString());
        });
        /*
        System.out.println("dom : "+((stats.get(0)+d1)/2)+" Null : "+((stats.get(1)+d2)/2)+" Ext : "+((stats.get(2)+d3)/2));
        for(int i=100;i>=0;i--){
        for(int j=0;(i+j)<=100;j++){
        k=100-(i+j);
        Combinaison c = new Combinaison(m,((stats.get(0)+d1)/2)*i*m.getQuoteDom(),((stats.get(1)+d2)/2)*j*m.getQuoteEgalite(),((stats.get(2)+d3)/2)*k*m.getQuoteExt());
        combines.add(c);
        }
        }
        }
        Combinaison laCom = new Combinaison();
        for(Combinaison c : combines){
        if(c.total() > laCom.total())
        laCom = c;
        }
        System.out.println("Meilleure Combinaison pour le match "+laCom.getM().toString2());
        System.out.println("Parier "+laCom.getP1()+ " pour "+laCom.getM().getEquipeDom());
        System.out.println("Parier "+laCom.getP2()+ " pour l'égalité");
        System.out.println("Parier "+laCom.getP3()+ " pour "+laCom.getM().getEquipeExt());
        /*
        HashMap<String,Combinaison> paries = new HashMap<>();
        for(int i = 1; i <= 10; i++){
        for (Match m : listeMatchs) {
        ArrayList<Double> stats = calculate(m.getEquipeDom(),m.getEquipeExt());
        double pari = i * m.getQuoteDom();
        double totalCotes = m.getQuoteDom() + m.getQuoteEgalite() + m.getQuoteExt();
        double statDom = m.getQuoteExt()/totalCotes;
        double statEga = m.getQuoteEgalite()/totalCotes;
        double statExt = m.getQuoteDom()/totalCotes;
        //Combinaison c = new Combinaison(m.getEquipeDom(), pari, (statDom + stats.get(0))/2);
        Combinaison c = new Combinaison(m.getEquipeDom(), pari, statDom);
        paries.put("(1) " + m.toString2(),c);
        pari = i * m.getQuoteEgalite();
        //c = new Combinaison("Égalité", pari, (statEga + stats.get(1))/2);
        c = new Combinaison("Égalité", pari, statEga);
        paries.put("(2) " + m.toString2(),c);
        pari = i * m.getQuoteExt();
        //c = new Combinaison(m.getEquipeExt(), pari, (statExt + stats.get(2))/2 );
        c = new Combinaison(m.getEquipeExt(), pari, statExt);
        paries.put("(3) " + m.toString2(),c);
        }
        }
        Set<Entry<String,Combinaison>> setHm = paries.entrySet();
        Iterator<Entry<String,Combinaison>> it = setHm.iterator();
        System.out.println(paries.size());
        while(it.hasNext()){
        Entry<String,Combinaison> e = it.next();
        System.out.println(e.getKey() + " : " + e.getValue().getPari() + " montant parié " + formatter.format(e.getValue().getGain()) + " pourcentage " + formatter.format(e.getValue().getPourcentage()*100)+"%");
        }
         */
    }//GEN-LAST:event_jButtonParierActionPerformed

    private void jComboBoxCompDomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCompDomActionPerformed
        myConnection.setTableName("APP.EQUIPES");
        ArrayList<Equipe> equipes = myConnection.selectTeamsByComp(jComboBoxCompDom.getSelectedItem().toString());
        ArrayList<String> s = new ArrayList<>();
        for(Equipe e : equipes){
            s.add(e.getNom());
        }
        jComboBoxEquipeDom.setModel(new javax.swing.DefaultComboBoxModel(s.toArray(new String[s.size()])));
            
    }//GEN-LAST:event_jComboBoxCompDomActionPerformed

    private void jComboBoxCompExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCompExtActionPerformed
        myConnection.setTableName("APP.EQUIPES");
        ArrayList<Equipe> equipes = myConnection.selectTeamsByComp(jComboBoxCompExt.getSelectedItem().toString());
        ArrayList<String> s = new ArrayList<>();
        for(Equipe e : equipes){
            s.add(e.getNom());
        }
        jComboBoxEquipeExt.setModel(new javax.swing.DefaultComboBoxModel(s.toArray(new String[s.size()])));
    }//GEN-LAST:event_jComboBoxCompExtActionPerformed

    public ArrayList<Double> calculate(String equipeDom, String equipeExt){

        double nbVictoiresEquipeDom;
        double nbVictoiresEquipeExt;
        double nbMatchs;
        BigDecimal statsDom;
        BigDecimal statsExt;
        BigDecimal statsNull;
        
        nbMatchs = myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE (equipe_domicile='" + equipeDom + "' AND equipe_exterieur='" + equipeExt +"') OR (equipe_domicile='"+equipeExt+"' AND equipe_exterieur='"+equipeDom+"')");
       
        if(nbMatchs>0){
            nbVictoiresEquipeDom = (victoiresADomicile(equipeDom,equipeExt,"") * 0.9 + victoiresAExterieur(equipeDom,equipeExt,"") * 1.1)*1.1;
            nbVictoiresEquipeExt = (victoiresADomicile(equipeExt,equipeDom,"") * 0.9 + victoiresAExterieur(equipeExt,equipeDom,"") * 1.1)*0.9;
            statsDom = new BigDecimal(nbVictoiresEquipeDom/nbMatchs);
            statsExt = new BigDecimal(nbVictoiresEquipeExt/nbMatchs);
            statsNull= new BigDecimal(1-(nbVictoiresEquipeDom/nbMatchs + nbVictoiresEquipeExt/nbMatchs));
        }
        
        
        
        int y=0;
        LinkedList<BigDecimal> la = new LinkedList<>();
        LinkedList<BigDecimal> lsd = new LinkedList<>();
        LinkedList<BigDecimal> lsn = new LinkedList<>();
        LinkedList<BigDecimal> lse = new LinkedList<>();
        BigDecimal tlsd = new BigDecimal(0);
        BigDecimal tlsn = new BigDecimal(0);
        BigDecimal tlse = new BigDecimal(0);
        
        BigDecimal t = new BigDecimal(0);
        for(int i=1997;i<2018;i++){
            
            y++;
            nbMatchs = myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE YEAR(date)="+i+" AND ((equipe_domicile='" + equipeDom + "' AND equipe_exterieur='" + equipeExt +"') OR (equipe_domicile='"+equipeExt+"' AND equipe_exterieur='"+equipeDom+"'))");
            
            if(nbMatchs > 0){
                //System.out.println(i);
                nbVictoiresEquipeDom = (victoiresADomicile(equipeDom,equipeExt,Integer.toString(i)) * 0.95 + victoiresAExterieur(equipeDom,equipeExt,Integer.toString(i)) * 1.05)*1.05;
                nbVictoiresEquipeExt = (victoiresADomicile(equipeExt,equipeDom,Integer.toString(i)) * 0.95 + victoiresAExterieur(equipeExt,equipeDom,Integer.toString(i)) * 1.05)*0.95;
                statsDom = new BigDecimal(nbVictoiresEquipeDom/nbMatchs);
                statsExt = new BigDecimal(nbVictoiresEquipeExt/nbMatchs);
                statsNull= new BigDecimal(1).subtract(statsDom.add(statsExt));
                //System.out.println("nbMatchs = "+nbMatchs+" "+" stats domicile ="+statsDom+" stats null="+statsNull+" stats exterieur ="+statsExt);
                BigDecimal ajustement = new BigDecimal((double)y/(double)21);
                la.add(ajustement);
                t=t.add(ajustement);
 
                //System.out.println("Ajustement = "+ajustement);
                statsDom = statsDom.multiply(ajustement);
                //System.out.print(ajustement+" X "+statsNull+" = ");
                statsNull = statsNull.multiply(ajustement);
                //System.out.println(statsNull);
                statsExt = statsExt.multiply(ajustement);
                //System.out.println("victoire " + statsDom + " egalité " + statsNull + " defaite " + statsExt);
                lsd.add(statsDom);
                lsn.add(statsNull);
                lse.add(statsExt);
                tlsd=statsDom.add(tlsd);
                tlsn=statsNull.add(tlsn);
                tlse=statsExt.add(tlse);
            }   
        }

        BigDecimal tsd = new BigDecimal(0);
        BigDecimal tsn = new BigDecimal(0);
        BigDecimal tse = new BigDecimal(0);
        BigDecimal tt= new BigDecimal(0);
        
        for (int i=0;i<la.size();i++) {
            //System.out.println(la.get(i).divide(t,10,BigDecimal.ROUND_HALF_DOWN));
            //System.out.println(lsd.get(i));
            //System.out.println(lsn.get(i));
            //System.out.println(lse.get(i));
            //System.out.println("fin");
            tsd=tsd.add(lsd.get(i).multiply(la.get(i).divide(t,10,BigDecimal.ROUND_HALF_DOWN)));
            //tsd=tsd.add(lsd.get(i));
            //tsn=tsn.add(lsn.get(i));
            //tse=tse.add(lse.get(i));
            tsn=tsn.add(lsn.get(i).multiply(la.get(i).divide(t,10,BigDecimal.ROUND_HALF_DOWN)));
            tse=tse.add(lse.get(i).multiply(la.get(i).divide(t,10,BigDecimal.ROUND_HALF_DOWN)));
        }
        
        tt=tsd.add(tsn.add(tse));
        BigDecimal s1 = new BigDecimal(0);
        BigDecimal s2 = new BigDecimal(0);
        BigDecimal s3 = new BigDecimal(0);
        if(tt.doubleValue() > 0){

            s1=(tsd.divide(tt,10,BigDecimal.ROUND_HALF_DOWN));
            s2=(tsn.abs().divide(tt,10,BigDecimal.ROUND_HALF_DOWN));
            s3=(tse.divide(tt,10,BigDecimal.ROUND_HALF_DOWN));
            System.out.println("victoire " + formatter.format(s1) + " egalité " + formatter.format(s2) + " defaite " + formatter.format(s3));
        }
        ArrayList<Double> l = new ArrayList<>();
        l.add(s1.doubleValue());
        l.add(s2.doubleValue());
        l.add(s3.doubleValue());
        
        jLabelStatDom.setText(formatter.format(s1.multiply(new BigDecimal(100)))+"%");
        jLabelStatNull.setText(formatter.format(s2.multiply(new BigDecimal(100)))+"%");
        jLabelStatExt.setText(formatter.format(s3.multiply(new BigDecimal(100)))+"%");
        
        
        
        return l;
    }

    public double victoiresADomicile(String equipeDom,String equipeExt, String date){
        if("".equals(date))
            return myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE equipe_domicile='" + equipeDom + "' AND equipe_exterieur='"+equipeExt+"' AND but_domicile > but_exterieur");
        else
            return myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE YEAR(date)="+date+" AND equipe_domicile='" + equipeDom + "' AND equipe_exterieur='"+equipeExt+"' AND but_domicile > but_exterieur");
    }
    public double victoiresAExterieur(String equipeDom,String equipeExt, String date){
        if("".equals(date))
            return myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE equipe_domicile='" + equipeExt + "' AND equipe_exterieur='"+equipeDom+"' AND but_domicile < but_exterieur");
        else
            return myConnection.execute("SELECT COUNT(*) FROM APP.MATCHES WHERE YEAR(date)="+date+" AND equipe_domicile='" + equipeExt + "' AND equipe_exterieur='"+equipeDom+"' AND but_domicile < but_exterieur");
    }
    
    public void pronostiquer() throws Exception{
        double[] values = new double[3];
        values[0] = nn.getListNomEquipes().indexOf(jComboBoxEquipeDom.getSelectedItem().toString());
        values[1] = nn.getListNomEquipes().indexOf(jComboBoxEquipeExt.getSelectedItem().toString());
        values[2] = -1;
        double predInst = nn.classify(new DenseInstance(1.0,values));
        String predString = nn.instenseToString(predInst);
        
        jLabelPronostique.setText(predString);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonParier;
    private javax.swing.JButton jButtonSaveQuote;
    private javax.swing.JComboBox jComboBoxCompDom;
    private javax.swing.JComboBox jComboBoxCompExt;
    private javax.swing.JComboBox jComboBoxEquipeDom;
    private javax.swing.JComboBox jComboBoxEquipeExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelPronostique;
    private javax.swing.JLabel jLabelStatDom;
    private javax.swing.JLabel jLabelStatExt;
    private javax.swing.JLabel jLabelStatNull;
    private javax.swing.JTextField jTextMontant;
    private javax.swing.JTextField jTextQuoteDom;
    private javax.swing.JTextField jTextQuoteEgalite;
    private javax.swing.JTextField jTextQuoteExt;
    // End of variables declaration//GEN-END:variables
}
