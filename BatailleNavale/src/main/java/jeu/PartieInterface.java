/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jeu;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author k1fryouf
 */
public class PartieInterface extends JFrame {

    /**
     * Creates new form GrillePanel
     */
    public PartieInterface() {
        initComponents();
    }

    //fonction utlise pour redimentionner les images
    private Image scaledImage (Image img, int w, int h){
        BufferedImage resizedImage = new BufferedImage (w,h,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImage.createGraphics();
        
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img,0,0,w,h,null);
        g2.dispose();
        
        return resizedImage;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(){
        
        sequence = new LinkedHashMap();
        points = new ArrayList();
        setContentPane(new MyJPanel("/images/image_de_fond.jpg"));
        getContentPane().setLayout(null);
        setSize(1000, 600);
        setLocation(130,100);
        grille1 = new GrillePanel();
        grille1.setLocation(20, 20);
        grille1.setSize(355, 550);
        grille1.setOpaque(false);
        add(grille1);
        
        grille2 = new GrilleAdverse();
        grille2.setLocation(400, 20);
        grille2.setSize(355, 333);
        grille2.setOpaque(false);
        
        capitain = new MyJPanel("/images/capitain.png");
        add(capitain);
        capitain.setLocation(700, 5);
        capitain.setSize(290,570);
        capitain.setOpaque(false);
        capitain.setLayout(null);
        bulleCapitain = new JLabel();
        bulleCapitain.setText("");
        bulleCapitain.setIcon(new ImageIcon(getClass().getResource("/images/image_bulle.png").getPath()));
        bulleCapitain.setLocation(70, 0);
        bulleCapitain.setSize(220, 150);
        bulleCapitain.setOpaque(false);
        
        buttonQuit = new JButton();
        buttonQuit.setText("Quitter");
        buttonSave = new JButton();
        buttonSave.setText("Sauvegarder");
        buttonStart = new JButton();
        buttonStart.setText("Commencer !");
        
        capitain.add(buttonQuit);
        capitain.add(buttonSave);
        capitain.add(buttonStart);
        buttonStart.setSize(200,50);
        buttonSave.setSize(200,50);
        buttonQuit.setSize(200,50);
        buttonStart.setLocation(100,400);
        buttonSave.setLocation(100,460);
        buttonQuit.setLocation(100,520);
        buttonRevoir = new RoundButton(new ImageIcon(getClass().getResource("/images/image_replay.png").getPath()));
        buttonRevoir.setSize(100,100);
        buttonRevoir.setLocation(327,410);
        buttonRevoir.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                buttonRevoirActionPerformed(e);
                partieControleur.revoirPartie(partieInterface);
            }
            
        });
        
        buttonStart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {

                if(grille1.ready()){
                    partieControleur = new PartieControleur();
                    partieControleur.positionnerBateaux(grille1.retourneX(),grille1.retourneY(),grille1.retourneVH());
                    partieInterface.remove(boiteInstructions);

                    if(partieControleur.verifierBateaux()){
                        add(grille2);
                        buttonStartActionPerformed(evt);

                    }else{
                        partieControleur = null;
                        afficherMessage(null,"Vous avez deux bateaux sur la mÃªme case !");
                    }
                    revalidate();
                    repaint();
                }
                
            }
        });
        
        buttonSave.addActionListener(new ActionListener() {
             @Override
            public void actionPerformed(ActionEvent evt) {
                partieControleur.sauvegarderPartie();
            }
        });
        
        buttonQuit.addActionListener(new ActionListener() {
             @Override
            public void actionPerformed(ActionEvent evt) {
                setVisible(false);
                dispose();
            }
        });
        
        String txt = "<html><font face='Verdana' size='3' color='white'><b> &nbsp &nbsp &nbsp"
                          + " 1. PLACEZ VOS BATEAUX SUR VOTRE GRILLE.<br /><br />"
                          + " &nbsp &nbsp &nbsp 2. TOURNEZ VOS BATEAUX.<br /><br />"
                          + " &nbsp &nbsp &nbsp 3. APPUYEZ SUR COMMENCER.</b></font><html>";
        boiteInstructions = new JLabel();
        add(boiteInstructions);
        boiteInstructions.setSize(330,150);
        boiteInstructions.setLocation(380,400);
        boiteInstructions.setBackground(new Color(0,0,0,100));
        boiteInstructions.setOpaque(true);
        boiteInstructions.setText(txt);
        boiteInstructions.setFont(null);
    }// </editor-fold>                        
     
    private void buttonStartActionPerformed(ActionEvent evt) {                                         
        buttonStart.setEnabled(false);
        grille1.desactiver();    
        activer(grille2);
    }   
    
        private void buttonRevoirActionPerformed(ActionEvent evt) {                                         
        buttonRevoir.setEnabled(false);
    }    
        private class MyMouseAdapter extends MouseAdapter {

        private JPanel clickedPanel = null;
        Reponse coup1;
        Reponse coup2;
        boolean dejaJoue = false;

        @Override
        public void mousePressed(MouseEvent me) {
            coup1 = null;
            coup2 = null;
            dejaJoue = false;
            
            JPanel droppedPanel = (JPanel) grille2.backingPanel.getComponentAt(me.getPoint());
            if (droppedPanel == null) {
            }else{
                int r = -1;
                int c = -1;
                searchPanelGrid:
                for (int row = 0; row < grille2.panelGrid.length; row++) {
                    for (int col = 0; col < grille2.panelGrid[row].length; col++) {
                        if (grille2.panelGrid[row][col] == droppedPanel) {
                            r = row;
                            c = col;
                            if(partieControleur.coupDejaJoue(1,new Case(r,c))){
                                dejaJoue = true;
                            }else{
                                coup1 = partieControleur.verifierCoup(1,new Case(r,c));
                            }  
                            break searchPanelGrid;
                        }
                    }
                }
                if(r==-1 || c == -1){
                    
                }else if (!dejaJoue){
                    
                    sequence.put(coup1,droppedPanel);
                    
                    if(coup1.isTouche()){
                        
                        afficherCoup(coup1,droppedPanel);
                        afficherMessage(coup1,null);
                    }else{
                        desactiver(grille2);
                        afficherCoup(coup1, droppedPanel);
                        afficherMessage(coup1,null);

                        new CoupAleatoire(coup2,partieControleur, grille1, partieInterface).startCountDownFromNow(); 
                    }
                }
            }
        }
    }

    public void activer(JComponent grille) {
        myMouseAdapter = new MyMouseAdapter();
        grille.addMouseListener(myMouseAdapter);
        grille.addMouseMotionListener(myMouseAdapter);
    }
    public void desactiver(JComponent grille) {
        grille.removeMouseListener(myMouseAdapter);
        grille.removeMouseMotionListener(myMouseAdapter);
    }
    
    public void afficherCoup(Reponse r, JPanel panel){
        String iconURL; 
        if(r.isTouche()){
            iconURL = "/images/explosion/";
        }else{

            iconURL = "/images/goute/";
        }
        new ImageAnimee(panel,iconURL,null).startCountDownFromNow();
    }
    public void afficherMessage(Reponse r, String s){
        
        capitain.add(bulleCapitain);
        JLabel message = new JLabel();
        message.setSize(180,80);
        message.setLocation(20, 20);
        message.setBackground(Color.white);
        message.setOpaque(true);
        String[] mots = new String[]{" Bravo "," Excellent ", " Joli coup ",};
        Random rand = new Random();
        int i = rand.nextInt(3);
        
        if(r==null){
            message.setText("<html>"+s+"<html>");
            bulleCapitain.add(message);
            capitain.add(bulleCapitain);
            capitain.revalidate();
            capitain.repaint();
            new MyJPanelEraser(5,capitain,bulleCapitain).startCountDownFromNow();
        }else{
            String msg="";
            System.out.println(r.getGagnant());
            if(r.getGagnant()){
                msg = "<html>  Bravo, Vous avez gagnÃ© !!!<html>";
                desactiver(grille1);
                desactiver(grille2);
                buttonSave.setEnabled(false);
                add(buttonRevoir);
                repaint();
                revalidate();
            }else if(r.isCoule()){
                msg = "<html>"+mots[i]+"! Vous avez coulÃ© le "+r.getNom()+" de l'ennemi.<html>";
            }else{
                if(r.isTouche()){
                    msg = "<html> "+mots[i]+" ! Vous avez touchÃ© le "+r.getNom()+" de l'ennemi.<html>";
                }else{
                    capitain.remove(bulleCapitain);
                }
            }
            message.setText(msg);
            System.out.println(msg);
            bulleCapitain.removeAll();
            bulleCapitain.add(message);
            capitain.revalidate();
            capitain.repaint();
            
        }
    }   
    
    public PartieControleur getPartieControleur() {
        return partieControleur;
    }

    public void setPartieControleur(PartieControleur partieControleur) {
        this.partieControleur = partieControleur;
    }

    public GrillePanel getGrille1() {
        return grille1;
    }

    public void setGrille1(GrillePanel grille1) {
        this.grille1 = grille1;
    }

    public GrilleAdverse getGrille2() {
        return grille2;
    }

    public void setGrille2(GrilleAdverse grille2) {
        this.grille2 = grille2;
    }

    public MyJPanel getCapitain() {
        return capitain;
    }

    public void setCapitain(MyJPanel capitain) {
        this.capitain = capitain;
    }

    public JLabel getBulleCapitain() {
        return bulleCapitain;
    }

    public void setBulleCapitain(JLabel bulleCapitain) {
        this.bulleCapitain = bulleCapitain;
    }

    public JLabel getBoiteInstructions() {
        return boiteInstructions;
    }

    public void setBoiteInstructions(JLabel boiteInstructions) {
        this.boiteInstructions = boiteInstructions;
    }

    public JButton getButtonQuit() {
        return buttonQuit;
    }

    public void setButtonQuit(JButton buttonQuit) {
        this.buttonQuit = buttonQuit;
    }

    public JButton getButtonSave() {
        return buttonSave;
    }

    public void setButtonSave(JButton buttonSave) {
        this.buttonSave = buttonSave;
    }

    public JButton getButtonStart() {
        return buttonStart;
    }

    public void setButtonStart(JButton buttonStart) {
        this.buttonStart = buttonStart;
    }

    public PartieInterface getPartieInterface() {
        return partieInterface;
    }

    public void setPartieInterface(PartieInterface partieInterface) {
        this.partieInterface = partieInterface;
    }

    public MyMouseAdapter getMyMouseAdapter() {
        return myMouseAdapter;
    }

    public void setMyMouseAdapter(MyMouseAdapter myMouseAdapter) {
        this.myMouseAdapter = myMouseAdapter;
    }

    public RoundButton getButtonRevoir() {
        return buttonRevoir;
    }

    public void setButtonRevoir(RoundButton buttonRevoir) {
        this.buttonRevoir = buttonRevoir;
    }

    public LinkedHashMap<Reponse, JPanel> getSequence() {
        return sequence;
    }

    public void setSequence(LinkedHashMap<Reponse, JPanel> sequence) {
        this.sequence = sequence;
    }

    public ArrayList<Point> getPoints() {
        return points;
    }

    public void setPoints(ArrayList<Point> points) {
        this.points = points;
    }
    
    // Variables declaration - do not modify   

    private PartieControleur partieControleur ;
    private GrillePanel grille1;
    private GrilleAdverse grille2;
    private MyJPanel capitain;
    private JLabel bulleCapitain;
    private JLabel boiteInstructions;
    private JButton buttonQuit;
    private JButton buttonSave;
    private JButton buttonStart;
    private RoundButton buttonRevoir;
    private PartieInterface partieInterface = this;
    private MyMouseAdapter myMouseAdapter;  
    private LinkedHashMap<Reponse,JPanel> sequence;
    private ArrayList<Point> points;
    // End of variables declaration   
}


